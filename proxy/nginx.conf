user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    proxy_headers_hash_bucket_size 128;
    proxy_cache_path /tmp/terraform-cache levels=1:2 keys_zone=terraform_cache:10m max_size=10g inactive=7d use_temp_path=off;

    # Custom log format so we can validate cache HITS and MISSES
    log_format custom_cache_log '[$time_local] [Cache:$upstream_cache_status] [$host] [Remote_Addr: $remote_addr] - $remote_user - $server_name to: $upstream_addr: "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" ';

    # terraform-registry.example.com
    server {
        listen       443 ssl;
        server_name  terraform-registry.example.com;
        resolver 8.8.8.8 ipv6=off;
        access_log  /var/log/nginx/terraform-registry-cache.log custom_cache_log;

        # SSL
        ssl_certificate "/etc/letsencrypt/live/terraform-registry.example.com/fullchain.pem";
        ssl_certificate_key "/etc/letsencrypt/live/terraform-registry.example.com/privkey.pem";
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;
        ssl_prefer_server_ciphers on;

        location / {
            # Pull from the local cache then https://registry.terraform.io/
            proxy_cache terraform_cache;
            proxy_cache_use_stale error timeout;
            proxy_pass https://registry.terraform.io/;
            proxy_set_header Accept-Encoding "";
            proxy_set_header X-Forwarded-For $remote_addr;
            tcp_nodelay on;
            # Rewrite releases.hashicorp.com payloads so the Terraform CLI pulls artifacts from terraform-releases.example.com
            sub_filter_types application/json;
            sub_filter 'releases.hashicorp.com' 'terraform-releases.example.com';
        }
    }

    # terraform-releases.example.com
    server {
        listen       443 ssl;
        server_name  terraform-releases.example.com;
        resolver 8.8.8.8 ipv6=off;
        access_log  /var/log/nginx/terraform-releases-cache.log custom_cache_log;

        # SSL
        ssl_certificate "/etc/letsencrypt/live/terraform-releases.example.com/fullchain.pem";
        ssl_certificate_key "/etc/letsencrypt/live/terraform-releases.example.com/privkey.pem";
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;
        ssl_prefer_server_ciphers on;

        location / {
            # Pull from the local cache then https://releases.hashicorp.com/
            proxy_cache terraform_cache;
            proxy_cache_use_stale error timeout;
            proxy_pass https://releases.hashicorp.com/;
            proxy_set_header Accept-Encoding "";
            proxy_set_header X-Forwarded-For $remote_addr;
            tcp_nodelay on;
        }
    }
}
